@inject ISyncLocalStorageService LocalStorage
@inject ICartService CartService
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@implements IDisposable
@inject ICategoryService CategoryService
@inject ILocalStorageService LocalStorageLogin
@inject AuthenticationStateProvider AuthStateProvider  

<BlazoredTypeahead SearchMethod="@SearchProduct"
                   TValue="Product"
                   TItem="Product"
                   Value="selectedProduct"
                   ValueChanged="HandleSearch"
                   ValueExpression="@(() => selectedProduct)"
                   placeholder="Search...">
    <SelectedTemplate>
        @context.Title
    </SelectedTemplate>
    <ResultTemplate>
        @context.Title
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, there weren't any products found.
    </NotFoundTemplate>
</BlazoredTypeahead>
<AuthorizeView>
                <Authorized>
                    
                    <RadzenProfileMenu Click="@(args => ChooseFunc(args))">
                        <Template>
                            <RadzenGravatar Email="projektwat19@gmail.com">
                            </RadzenGravatar>
                        </Template>
                        <ChildContent>
                            <RadzenProfileMenuItem style="margin:0; width:150px;" Text="Profile" Path="profile" Icon="account_circle"></RadzenProfileMenuItem>
                            <RadzenProfileMenuItem style="text-decoration:none; margin:20px; width:150px;" Text="Log out" Path="" Icon="line_weight"></RadzenProfileMenuItem>
                        </ChildContent>
                    </RadzenProfileMenu>
                </Authorized>
            </AuthorizeView>
    <a href="cart" class="btn btn-info">
        <i class="oi oi-cart"></i>
        Cart
        <span class="badge badge-pill badge-light">@GetProductCount()</span>
    </a>
    

@code {
    private Product selectedProduct;

    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }
    private async void Logout()
    {
        await  LocalStorageLogin.RemoveItemAsync("name");
        await  LocalStorageLogin.RemoveItemAsync("email");
        await  LocalStorageLogin.RemoveItemAsync("city");
        await  LocalStorageLogin.RemoveItemAsync("phone");
        await  LocalStorageLogin.RemoveItemAsync("postcode");
        await  LocalStorageLogin.RemoveItemAsync("street");
        await  LocalStorageLogin.ClearAsync();
        await AuthStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/");
    }
    void ChooseFunc(RadzenProfileMenuItem e)
    {
        if (e.Text == "Log out")
        {
            Logout();
        }
        else if(e.Text == "Profile")
            Console.WriteLine("Profile");

    }
    private int GetProductCount()
    {
        var cart = LocalStorage.GetItem<List<ProductVariant>>("cart");
        return cart != null ? cart.Count : 0;
    }

    private void HandleSearch(Product product)
    {
        if (product == null) return;
        selectedProduct = product;
        NavigationManager.NavigateTo($"product/{selectedProduct.Id}");
    }

    private async Task<IEnumerable<Product>> SearchProduct(string searchText)
    {
        var response = await ProductService.SearchProducts(searchText);
        return response;
    }
}
