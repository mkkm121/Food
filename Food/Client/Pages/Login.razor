@page "/login"
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserService UserService
@using Food.Shared
@using Food.Client.Pages
@inject IJSRuntime JsRuntime

<EditForm Model="User" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="User.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => User.Email)" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" @bind-Value="User.Password" class="form-control"></InputText>
        <ValidationMessage For="@(() => User.Password)" />

    </div>
    <RadzenButton Click=@(args => OnRegister()) Text="Register" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" />
    <RadzenButton ButtonType="ButtonType.Submit" Text="Login" Icon="login" ButtonStyle="ButtonStyle.Info" />
</EditForm>



@code {
    public UserLogin User { get; set; } = new UserLogin();
    public UserRegister User2 = new UserRegister();
    private async void HandleLogin()
    {
        if (User.Email == null || User.Password == null)
        {

        }
        else
        {
            User2 = await UserService.LoginUser(User.Email + " " + User.Password);
            if (User2.Name == null)
            {
                 await JsRuntime.InvokeVoidAsync("alert", "Wrong Password!"); // Alert
            }
            else
            {
                await LocalStorage.SetItemAsync<string>("name", User2.Name);
                await LocalStorage.SetItemAsync<string>("email", User2.Email);
                await LocalStorage.SetItemAsync<string>("city", User2.City);
                await LocalStorage.SetItemAsync<string>("phone", User2.Phone);
                await LocalStorage.SetItemAsync<string>("postcode", User2.PostCode);
                await LocalStorage.SetItemAsync<string>("street", User2.Street);
                await AuthStateProvider.GetAuthenticationStateAsync();
                NavigationManager.NavigateTo("/all");
            }
        }
    }

    void OnRegister()
    {
        NavigationManager.NavigateTo("/register");

    }

}
