@page "/cart"
@inject ICartService CartService
@inject NavigationManager navigationManager
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage

@if (!orderPlaced)
{
    <h3>Shopping Cart</h3>
    @if (cartItems == null || cartItems.Count <= 0)
    {
        <span>You have no items in your cart.</span>
    }
    else
    {
        <div>
            @foreach (var item in cartItems)
            {
                <div class="item-container">
                    <div class="item-image-wrapper"><img src="@item.Image" class="item-image" /></div>
                    <div class="item-name">
                        <h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>
                        <span>@item.EditionName</span><br />
                     <div class="cart_row">
                        <EditForm Model="item" style="width: 100px">
                            <InputNumber id="quantity" @bind-Value="item.Quantity"
                                         class="form-control" style="width: 70px" />
                        </EditForm>
                        <RadzenButton Click=@(args => DeleteItem(item)) Icon="delete" ButtonStyle="ButtonStyle.Danger" />
                    </div>
                    </div>
                    <div class="item-price">$@(item.Price * item.Quantity)</div>
                </div>
            }
            <div class="item-price">
                Total (@cartItems.Count): $@cartItems.Sum(item => item.Price * item.Quantity)
            </div>
            <RadzenFieldset Text="You can edit your info/delivery address here">
                    <RadzenTabs SelectedIndex="0">
                        <Tabs>
                            <RadzenTabsItem Text="Contact Info">
                                  <div class="row" style="margin-bottom:10px">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Name" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenTextBox Placeholder="@(localStorage.GetItem<string>("name"))" style="width: 100%;" Name="Name" ReadOnly="true"/>
                                    </div>
                                </div>
                                  <div class="row">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel  Text="Email" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenTextBox Placeholder="@(localStorage.GetItem<string>("email"))" style="width: 100%;" Name="Email" ReadOnly="true"/>
                                    </div>
                                </div>
                            </RadzenTabsItem>
                            <RadzenTabsItem Text="Delivery Details">
                                <div class="row" style="margin-bottom:10px">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Street / Home Number">
                                        </RadzenLabel>
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenTextBox Placeholder="@street" Change=@(args => OnChange(args, "street")) style="width: 100%;" Name="Address1" />
                                    </div>
                                </div>
                                <div class="row" style="margin-bottom:10px">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="City" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenTextBox Placeholder="@city" Change=@(args => OnChange(args, "city")) style="width: 100%;" Name="Address2" />
                                    </div>
                                </div>
                                <div class="row" style="margin-bottom:10px">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Postal Code" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenTextBox Placeholder="@postcode" Change=@(args => OnChange(args, "postcode")) style="width: 100%;" Name="Address3" />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Special Request" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenTextBox Placeholder="@note" Change=@(args => OnChange(args, "note")) style="width: 100%;" Name="Special" />
                                    </div>
                                </div>
                                <RadzenButton style="width: 160px" Icon="save" BusyText="Saving ..." IsBusy=@busy Click=@OnBusyClick Text="Save" />
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>
                </RadzenFieldset>
            
            <div style="text-align: center; margin-top: 10px;">
                <RadzenButton Click=@(args => PlaceOrder()) Text="Order" Icon="check" ButtonStyle="ButtonStyle.Success" />
            </div>
        </div>
    }
}
else
{
    <h3>Thank you for your order!</h3>
    <h4>Here's what you'll get:</h4>
    <div>
        @foreach (var item in cartItems)
        {
            <div class="item-container">
                <div class="item-image-wrapper"><img src="@item.Image" class="item-image" /></div>
                <div class="item-name">
                    <h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>
                    <span>@item.EditionName</span><br />
                </div>
                <div class="item-price">$@(item.Price * item.Quantity)</div>
            </div>
        }
        <div class="item-price">
            Total (@cartItems.Count): $@cartItems.Sum(item => item.Price * item.Quantity)
        </div>
    </div>
}

@code {
        List<CartItem> cartItems = new List<CartItem>();

        bool orderPlaced = false;

        bool busy;

        string city;
        string postcode;
        string street;
        string note;

    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService.GetCartItems();
        if (cartItems.Count > 0)
        {
            city = cartItems[0].CustomerCity;
            postcode = cartItems[0].CustomerPostCode;
            street = cartItems[0].CustomerStreet;
        }
    }

    private async Task DeleteItem(CartItem item)
    {
        await CartService.DeleteItem(item);
        cartItems = await CartService.GetCartItems();
    }

    private async Task PlaceOrder()
    {
        CartService.CreateCart();
        string checkoutUrl = await CartService.Checkout();
        navigationManager.NavigateTo(checkoutUrl);
        await CartService.EmptyCart();
    }
    void OnChange(string value, string name)
    {
        if(name=="note")
            note = value;
        if(name=="city")
            city = value;
        if(name=="postcode")
            postcode = value;
        if(name== "street")
            street = value;
    }
    async Task OnBusyClick()
    {
        Console.WriteLine("note: " + note);
        busy = true;
        cartItems = await CartService.GetCartItems();
        foreach (var cartItem in cartItems)
        {
            cartItem.Quantity = 0;
            cartItem.CustomerStreet = street;
            cartItem.CustomerPostCode = postcode;
            cartItem.CustomerNote = note;
            cartItem.CustomerCity = city;
            await CartService.AddToCart(cartItem);
        }
        cartItems = await CartService.GetCartItems();
        await Task.Delay(2000);
        busy = false;
    }
}
